{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "CreateCustomerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/lets-delivery-customers-dev-createCustomer"
      }
    },
    "GetCustomerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/lets-delivery-customers-dev-getCustomer"
      }
    },
    "UpdateCustomerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/lets-delivery-customers-dev-updateCustomer"
      }
    },
    "DeleteCustomerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/lets-delivery-customers-dev-deleteCustomer"
      }
    },
    "ListCustomersLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/lets-delivery-customers-dev-listCustomers"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "lets-delivery-customers",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:TagResource"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/lets-delivery-customers-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/lets-delivery-customers-dev*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:PutItem",
                    "dynamodb:GetItem",
                    "dynamodb:DeleteItem",
                    "dynamodb:Scan",
                    "dynamodb:UpdateItem"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "CustomerTable",
                        "Arn"
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "iam:PassRole"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "lets-delivery-customers",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "CreateCustomerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/lets-delivery-customers/dev/1700090630955-2023-11-15T23:23:50.955Z/lets-delivery-customers.zip"
        },
        "Handler": "src/handlers/customer-handler.createCustomer",
        "Runtime": "nodejs14.x",
        "FunctionName": "lets-delivery-customers-dev-createCustomer",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AWS_REGION_ENV": "localhost",
            "DYNAMODB_ENDPOINT": "http://localhost:8000",
            "ACCESS_KEY_ID": "DEFAULTACCESSKEY",
            "SECRET_ACCESS_KEY": "DEFAULTSECRET",
            "IS_OFFLINE": "true"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateCustomerLogGroup"
      ]
    },
    "GetCustomerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/lets-delivery-customers/dev/1700090630955-2023-11-15T23:23:50.955Z/lets-delivery-customers.zip"
        },
        "Handler": "src/handlers/customer-handler.getCustomer",
        "Runtime": "nodejs14.x",
        "FunctionName": "lets-delivery-customers-dev-getCustomer",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AWS_REGION_ENV": "localhost",
            "DYNAMODB_ENDPOINT": "http://localhost:8000",
            "ACCESS_KEY_ID": "DEFAULTACCESSKEY",
            "SECRET_ACCESS_KEY": "DEFAULTSECRET",
            "IS_OFFLINE": "true"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetCustomerLogGroup"
      ]
    },
    "UpdateCustomerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/lets-delivery-customers/dev/1700090630955-2023-11-15T23:23:50.955Z/lets-delivery-customers.zip"
        },
        "Handler": "src/handlers/customer-handler.updateCustomer",
        "Runtime": "nodejs14.x",
        "FunctionName": "lets-delivery-customers-dev-updateCustomer",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AWS_REGION_ENV": "localhost",
            "DYNAMODB_ENDPOINT": "http://localhost:8000",
            "ACCESS_KEY_ID": "DEFAULTACCESSKEY",
            "SECRET_ACCESS_KEY": "DEFAULTSECRET",
            "IS_OFFLINE": "true"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateCustomerLogGroup"
      ]
    },
    "DeleteCustomerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/lets-delivery-customers/dev/1700090630955-2023-11-15T23:23:50.955Z/lets-delivery-customers.zip"
        },
        "Handler": "src/handlers/customer-handler.deleteCustomer",
        "Runtime": "nodejs14.x",
        "FunctionName": "lets-delivery-customers-dev-deleteCustomer",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AWS_REGION_ENV": "localhost",
            "DYNAMODB_ENDPOINT": "http://localhost:8000",
            "ACCESS_KEY_ID": "DEFAULTACCESSKEY",
            "SECRET_ACCESS_KEY": "DEFAULTSECRET",
            "IS_OFFLINE": "true"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DeleteCustomerLogGroup"
      ]
    },
    "ListCustomersLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/lets-delivery-customers/dev/1700090630955-2023-11-15T23:23:50.955Z/lets-delivery-customers.zip"
        },
        "Handler": "src/handlers/customer-handler.listCustomers",
        "Runtime": "nodejs14.x",
        "FunctionName": "lets-delivery-customers-dev-listCustomers",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "AWS_REGION_ENV": "localhost",
            "DYNAMODB_ENDPOINT": "http://localhost:8000",
            "ACCESS_KEY_ID": "DEFAULTACCESSKEY",
            "SECRET_ACCESS_KEY": "DEFAULTSECRET",
            "IS_OFFLINE": "true"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ListCustomersLogGroup"
      ]
    },
    "CreateCustomerLambdaVersionNmgaYuvKIOYNSlYpjdZaHNsa5LtbZZ1iti04RV5E98Y": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateCustomerLambdaFunction"
        },
        "CodeSha256": "d6wNst8g4uO6gPehrxXskgukbqoXPBEuqxFYRnEfK8E="
      }
    },
    "GetCustomerLambdaVersionCt1VnZodBaarVIgHA9CIWvw9sT3wYkAH53AU4Zhc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetCustomerLambdaFunction"
        },
        "CodeSha256": "d6wNst8g4uO6gPehrxXskgukbqoXPBEuqxFYRnEfK8E="
      }
    },
    "UpdateCustomerLambdaVersionYZ73tkA4xbHnDuTXUBfDuLvadsQmKOnZhSE5wi2dU94": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateCustomerLambdaFunction"
        },
        "CodeSha256": "d6wNst8g4uO6gPehrxXskgukbqoXPBEuqxFYRnEfK8E="
      }
    },
    "DeleteCustomerLambdaVersionj6VSpFTGED87AluxpD1TqZm6J2thB83hKxbvt0RRsC4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeleteCustomerLambdaFunction"
        },
        "CodeSha256": "d6wNst8g4uO6gPehrxXskgukbqoXPBEuqxFYRnEfK8E="
      }
    },
    "ListCustomersLambdaVersionDqIfoKtLJhKe0U6R7VNek0bh0InjYYI380fpz4OJFgQ": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ListCustomersLambdaFunction"
        },
        "CodeSha256": "d6wNst8g4uO6gPehrxXskgukbqoXPBEuqxFYRnEfK8E="
      }
    },
    "HttpApi": {
      "Type": "AWS::ApiGatewayV2::Api",
      "Properties": {
        "Name": "dev-lets-delivery-customers",
        "ProtocolType": "HTTP"
      }
    },
    "HttpApiStage": {
      "Type": "AWS::ApiGatewayV2::Stage",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "StageName": "$default",
        "AutoDeploy": true,
        "DefaultRouteSettings": {
          "DetailedMetricsEnabled": false
        }
      }
    },
    "CreateCustomerLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateCustomerLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationCreateCustomer": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "CreateCustomerLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostCustomer": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /customer",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationCreateCustomer"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationCreateCustomer"
    },
    "GetCustomerLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetCustomerLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetCustomer": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetCustomerLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetCustomerIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /customer/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetCustomer"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetCustomer"
    },
    "UpdateCustomerLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateCustomerLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationUpdateCustomer": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "UpdateCustomerLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePutCustomerIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PUT /customer/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationUpdateCustomer"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationUpdateCustomer"
    },
    "DeleteCustomerLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeleteCustomerLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationDeleteCustomer": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "DeleteCustomerLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteDeleteCustomerIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "DELETE /customer/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationDeleteCustomer"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationDeleteCustomer"
    },
    "ListCustomersLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ListCustomersLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationListCustomers": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "ListCustomersLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetCustomer": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /customer",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationListCustomers"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationListCustomers"
    },
    "CustomerTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "CustomerTable",
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 1,
          "WriteCapacityUnits": 1
        },
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ]
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-lets-delivery-customers-dev-ServerlessDeploymentBucketName"
      }
    },
    "CreateCustomerLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateCustomerLambdaVersionNmgaYuvKIOYNSlYpjdZaHNsa5LtbZZ1iti04RV5E98Y"
      },
      "Export": {
        "Name": "sls-lets-delivery-customers-dev-CreateCustomerLambdaFunctionQualifiedArn"
      }
    },
    "GetCustomerLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetCustomerLambdaVersionCt1VnZodBaarVIgHA9CIWvw9sT3wYkAH53AU4Zhc"
      },
      "Export": {
        "Name": "sls-lets-delivery-customers-dev-GetCustomerLambdaFunctionQualifiedArn"
      }
    },
    "UpdateCustomerLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateCustomerLambdaVersionYZ73tkA4xbHnDuTXUBfDuLvadsQmKOnZhSE5wi2dU94"
      },
      "Export": {
        "Name": "sls-lets-delivery-customers-dev-UpdateCustomerLambdaFunctionQualifiedArn"
      }
    },
    "DeleteCustomerLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeleteCustomerLambdaVersionj6VSpFTGED87AluxpD1TqZm6J2thB83hKxbvt0RRsC4"
      },
      "Export": {
        "Name": "sls-lets-delivery-customers-dev-DeleteCustomerLambdaFunctionQualifiedArn"
      }
    },
    "ListCustomersLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ListCustomersLambdaVersionDqIfoKtLJhKe0U6R7VNek0bh0InjYYI380fpz4OJFgQ"
      },
      "Export": {
        "Name": "sls-lets-delivery-customers-dev-ListCustomersLambdaFunctionQualifiedArn"
      }
    },
    "HttpApiId": {
      "Description": "Id of the HTTP API",
      "Value": {
        "Ref": "HttpApi"
      },
      "Export": {
        "Name": "sls-lets-delivery-customers-dev-HttpApiId"
      }
    },
    "HttpApiUrl": {
      "Description": "URL of the HTTP API",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "HttpApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            }
          ]
        ]
      },
      "Export": {
        "Name": "sls-lets-delivery-customers-dev-HttpApiUrl"
      }
    }
  }
}